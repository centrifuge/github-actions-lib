name: Build App

on:
  workflow_call:
    inputs:
      build-args:
        description: 'pnpm build arguments'
        required: false
        type: string
        default: ''
      app-name:
        description: 'Prefix for build artifact names'
        required: true
        type: string
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      pnpm-version:
        description: 'pnpm version to use'
        required: false
        type: string
        default: '10'
    secrets:
      github-token:
        description: 'GitHub token (required for mainnet builds)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      artifact-name: ${{ steps.check-artifact.outputs.artifact-name }}
      skip-build: ${{ steps.check-artifact.outputs.skip_build }}
    steps:
      - name: '📥 Checkout Code'
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.github-token && github.ref || github.sha }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v3
        with:
          version: ${{ inputs.pnpm-version }}

      - name: '🟢 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'

      - name: '🔍 Check if Build Artifact Already Exists'
        if: github.event_name == 'release'
        id: check-artifact
        shell: sh
        run: |
          ARTIFACT_NAME="${{ inputs.app-name }}-bundle${{ github.ref_name }}.zip"
          echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          if [ -n "$(gh release view ${{ github.ref_name }} --repo ${{ github.repository }} --json assets --jq '.assets[] | select(.name == "'"$ARTIFACT_NAME"'")')" ]; then
            echo "::info::✅ Build artifact already exists, skipping build: $ARTIFACT_NAME"
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "::info::🔄 Build artifact not found, building $ARTIFACT_NAME"
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ inputs.github-token }}

      - name: '📥 Install Dependencies'
        shell: sh
        run: pnpm install --frozen-lockfile

      - name: '🔨 Build App'
        if: ${{ github.event_name != 'release' || steps.check-artifact.outputs.skip_build != 'true' }}
        id: build
        shell: sh
        run: |
          pnpm build ${{ inputs.build-args }}

      - name: '📦 Upload Build Artifact'
        if: ${{ steps.build.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app-name }}-build-${{ github.sha }}
          path: ./dist

      - name: '📦 Upload Build Artifact to Release'
        if: ${{ steps.build.outcome == 'success' && github.event.action == 'prereleased' }}
        shell: sh
        run: |
          # Create a zip file of the dist folder
          cd dist && zip -r ../${{ steps.check-artifact.outputs.artifact-name }} . && cd ..
          
          # Upload to release using GitHub CLI
          gh release upload ${{ github.ref_name }} ${{ steps.check-artifact.outputs.artifact-name }} \
            --repo ${{ github.repository }} \
            --clobber
        env:
          GH_TOKEN: ${{ inputs.github-token }}
