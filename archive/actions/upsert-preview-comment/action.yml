name: Upsert Preview Comment
description: Create or update a beautified preview comment on PRs for a specific app.

inputs:
  app:
    description: App name (matrix.app)
    required: true
  url:
    description: Deployment URL returned by the deploy step
    required: false
    default: ""
  status:
    description: Outcome of the deploy step (success/failure/cancelled)
    required: true
  lighthouse-url:
    description: Optional Lighthouse report URL to include in the comment
    required: false
    default: ""
  github-token:
    description: GitHub token used to post the comment
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - name: Upsert PR Preview Comment
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // Hidden marker to uniquely identify this app's comment so we can update it instead of duplicating
          const marker = `<!-- cf-preview:${{ inputs.app }} -->`;

          const app = `${{ inputs.app }}`;
          // Prefer the PR head SHA to avoid the merge commit SHA that GitHub sets as context.sha
          const sha = (context.payload.pull_request?.head?.sha) || context.sha;
          const shortSha = (sha || '').substring(0, 7);
          const commitUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${sha}`;
          const url = `${{ inputs.url }}` || '';
          const status = `${{ inputs.status }}`; // success | failure | cancelled
          const lighthouseUrl = `${{ inputs.lighthouse-url }}` || '';
          const icon = (status === 'success' && url)
            ? '✅'
            : (status === 'success' && !url)
              ? '⚠️'
              : '❌';

          // Build a small Cloudflare-like table for readability
          const helloUrl = url ? `${url.replace(/\/$/, '')}/api/hello` : '/api/hello';
          const extra = app === 'functions'
            ? `\n\n> Test functions quickly: GET ${helloUrl}\n> Example: curl -s ${helloUrl}\n> This endpoint is read-only and does not pin to IPFS.`
            : '';
          let body = `${marker}\n` +
            `### ${app} deploy to CF Workers\n\n` +
            '| Status | Name | Commit | Preview URL | Updated (UTC) |\n' +
            '|---|---|---|---|---|\n' +
            `| ${icon} | ${app} | ${shortSha ? `[${shortSha}](${commitUrl})` : 'NotFound'} | ${url ? `[Preview URL](${url})` : '—'} | ${new Date().toUTCString()} |` +
            `${extra}`;
          if (lighthouseUrl && app !== 'functions') {
            body += `\n\n**Lighthouse report**: ${lighthouseUrl}`;
          }
          
          // Fetch existing PR comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            per_page: 100,
          });

          // Upsert logic: update existing comment with the same marker, otherwise create one
          const existing = comments.find(c => c.body?.includes(marker));
          if (existing) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existing.id,
              body,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });
          }

