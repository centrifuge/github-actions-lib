name: 'Lighthouse Performance Test'
description: 'Run Lighthouse performance tests on the deployed app'

inputs:
  url:
    description: 'Base deployment URL to test'
    required: true
  app-name:
    description: 'App name for reporting'
    required: false
    default: 'app'
  skip-functions:
    description: 'Skip performance tests for functions (which are not web apps)'
    required: false
    default: 'true'

outputs:
  report_url:
    description: 'URL to the Lighthouse report'
    value: ${{ steps.lighthouse.outputs.report_url }}

runs:
  using: composite
  steps:
    - name: Skip performance test for functions
      if: ${{ inputs.skip-functions == 'true' && inputs.app-name == 'functions' }}
      shell: sh
      run: |
        echo "Skipping performance test for functions app"
        exit 0

    - name: Performance Test with Lighthouse
      if: ${{ inputs.skip-functions != 'true' || inputs.app-name != 'functions' }}
      id: lighthouse
      shell: sh
      run: |
        # Install Lighthouse CI
        npm install -g @lhci/cli
        
        # Create a minimal Lighthouse config
        cat > lighthouserc.js << 'EOF'
        module.exports = {
          ci: {
            collect: {
              url: ['${{ inputs.url }}'],
              numberOfRuns: 2,
            },
            upload: {
              target: 'temporary-public-storage',
            },
          },
        };
        EOF
        
        # Run Lighthouse CI and capture report URL
        set -o pipefail
        lhci autorun --config=lighthouserc.js 2>&1 | tee lhci.out
        REPORT_URL=$(grep -Eo 'https://storage.googleapis.com/[^ ]+\.html' lhci.out | tail -n1)
        if [ -n "$REPORT_URL" ]; then
          echo "report_url=$REPORT_URL" >> $GITHUB_OUTPUT
          echo "Lighthouse report URL: $REPORT_URL"
        else
          echo "No Lighthouse report URL found"
        fi
      env:
        LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
