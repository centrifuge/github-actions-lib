name: 'Deploy Single App'
description: 'Deploy a single app to Cloudflare Workers with optional environment selection'

inputs:
  environment:
    description: 'Environment to deploy to (dev, staging, production)'
    required: true
    default: 'dev'
  build-mode:
    description: 'Build mode (testnet, mainnet)'
    required: false
    default: 'testnet'
  release-tag:
    description: 'Release tag to download artifacts from (optional)'
    required: false
    default: ''
  app-name:
    description: 'App name for artifact pattern (used with release-tag)'
    required: false
    default: 'app'
  wrangler-command:
    description: 'Custom wrangler command to run (overrides environment logic)'
    required: false
    default: ''

outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy.outputs.deployment-url }}

runs:
  using: 'composite'
  steps:
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 10

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Download Release Artifacts
      if: ${{ inputs.release-tag != '' && inputs.environment == 'production'}}
      shell: sh
      run: |
        echo "Downloading artifacts from release ${{ inputs.release-tag }}"
        gh release download ${{ inputs.release-tag }} \
          --repo ${{ github.repository }} \
          --pattern "${{ inputs.app-name }}-build-*.zip" \
          --dir ./
        
        # Extract the zip file
        unzip "${{ inputs.app-name }}-build-*.zip" -d dist
        echo "Artifacts downloaded and extracted to dist/"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Dependencies
      if: ${{ inputs.environment != 'production' }}
      shell: sh
      run: pnpm install --frozen-lockfile

    - name: Build App
      if: ${{ inputs.environment != 'production' }}
      shell: sh
      run: |
        BUILD_ARGS=""
        if [ -f "vite.config.ts" ]; then
          BUILD_ARGS="--mode ${{ inputs.build-mode }}"
        fi
        pnpm build $BUILD_ARGS

    - name: Determine wrangler command
      if: ${{ inputs.wrangler-command == '' }}
      id: wrangler-command
      shell: sh
      run: |
        case "${{ inputs.environment }}" in
          "dev")
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              CMD="versions upload --env dev"
            else
              CMD="deploy --env dev"
            fi
            ;;
          "staging")
            CMD="versions upload --env prod --preview-alias staging"
            ;;
          "production")
            CMD="deploy --env prod"
            ;;
          *)
            echo "Invalid environment: ${{ inputs.environment }}"
            exit 1
            ;;
        esac
        echo "cmd=$CMD" >> $GITHUB_OUTPUT

    - name: Deploy to Cloudflare
      if: hashFiles('wrangler.toml') != ''
      id: deploy
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        command: ${{ inputs.wrangler-command != '' && inputs.wrangler-command || steps.wrangler-command.outputs.cmd }}

    - name: Skip deploy (wrangler.toml not found)
      if: hashFiles('wrangler.toml') == ''
      shell: sh
      run: |
        echo "::warning::Skipping deploy: wrangler.toml not found."
